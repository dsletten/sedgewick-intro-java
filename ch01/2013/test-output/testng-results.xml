<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="5" passed="5">
  <reporter-output>
  </reporter-output>
  <suite name="Chapter 1 Test Suite" duration-ms="83" started-at="2013-04-08T07:30:14Z" finished-at="2013-04-08T07:30:14Z">
    <groups>
    </groups>
    <test name="Section1_2" duration-ms="83" started-at="2013-04-08T07:30:14Z" finished-at="2013-04-08T07:30:14Z">
      <class name="TestSection1_2">
        <test-method status="PASS" signature="testDivides()[pri:0, instance:TestSection1_2@75e845c2]" name="testDivides" duration-ms="32" started-at="2013-04-08T03:30:14Z" finished-at="2013-04-08T03:30:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivides -->
        <test-method status="PASS" signature="testDividesNegative()[pri:0, instance:TestSection1_2@75e845c2]" name="testDividesNegative" duration-ms="1" started-at="2013-04-08T03:30:14Z" finished-at="2013-04-08T03:30:14Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[-3 must a positive integer.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: -3 must a positive integer.
	at Section1_2.divides(Section1_2.java:34)
	at TestSection1_2.testDividesNegative(TestSection1_2.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDividesNegative -->
        <test-method status="PASS" signature="testDividesZero()[pri:0, instance:TestSection1_2@75e845c2]" name="testDividesZero" duration-ms="4" started-at="2013-04-08T03:30:14Z" finished-at="2013-04-08T03:30:14Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[0 must a positive integer.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: 0 must a positive integer.
	at Section1_2.divides(Section1_2.java:36)
	at TestSection1_2.testDividesZero(TestSection1_2.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDividesZero -->
        <test-method status="PASS" signature="testRandomInt()[pri:0, instance:TestSection1_2@75e845c2]" name="testRandomInt" duration-ms="18" started-at="2013-04-08T03:30:14Z" finished-at="2013-04-08T03:30:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRandomInt -->
        <test-method status="PASS" signature="testTriangle()[pri:0, instance:TestSection1_2@75e845c2]" name="testTriangle" duration-ms="1" started-at="2013-04-08T03:30:14Z" finished-at="2013-04-08T03:30:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTriangle -->
      </class> <!-- TestSection1_2 -->
    </test> <!-- Section1_2 -->
  </suite> <!-- Chapter 1 Test Suite -->
</testng-results>
