<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="19" passed="19">
  <reporter-output>
  </reporter-output>
  <suite name="Chapter 1 Test Suite" duration-ms="224" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
    <groups>
    </groups>
    <test name="UseThree" duration-ms="30" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestUseThree">
        <test-method status="PASS" signature="testReverseArgs()[pri:0, instance:TestUseThree@39385660]" name="testReverseArgs" duration-ms="12" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverseArgs -->
      </class> <!-- TestUseThree -->
    </test> <!-- UseThree -->
    <test name="Divides" duration-ms="2" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestDivides">
        <test-method status="PASS" signature="testDoesDivide()[pri:0, instance:TestDivides@4cf7c31d]" name="testDoesDivide" duration-ms="1" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoesDivide -->
      </class> <!-- TestDivides -->
    </test> <!-- Divides -->
    <test name="Triangle" duration-ms="2" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestTriangle">
        <test-method status="PASS" signature="testAreAllPositive()[pri:0, instance:TestTriangle@6076ab2f]" name="testAreAllPositive" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAreAllPositive -->
        <test-method status="PASS" signature="testFailsTriangleInequality()[pri:0, instance:TestTriangle@6076ab2f]" name="testFailsTriangleInequality" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFailsTriangleInequality -->
      </class> <!-- TestTriangle -->
    </test> <!-- Triangle -->
    <test name="RandomInt" duration-ms="9" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestRandomInt">
        <test-method status="PASS" signature="testGetRandomInt()[pri:0, instance:TestRandomInt@2d8941f7]" name="testGetRandomInt" duration-ms="8" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetRandomInt -->
      </class> <!-- TestRandomInt -->
    </test> <!-- RandomInt -->
    <test name="Parametric" duration-ms="2" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestParametric">
        <test-method status="PASS" signature="testParameterized()[pri:0, instance:TestParametric@245e13ad]" name="testParameterized" duration-ms="1" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParameterized -->
      </class> <!-- TestParametric -->
    </test> <!-- Parametric -->
    <test name="Gravity" duration-ms="4" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestGravity">
        <test-method status="PASS" signature="testAltitude()[pri:0, instance:TestGravity@50618d26]" name="testAltitude" duration-ms="3" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAltitude -->
      </class> <!-- TestGravity -->
    </test> <!-- Gravity -->
    <test name="DateCheck" duration-ms="5" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestDateCheck">
        <test-method status="PASS" signature="testDateIsInRange()[pri:0, instance:TestDateCheck@18203c31]" name="testDateIsInRange" duration-ms="1" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDateIsInRange -->
      </class> <!-- TestDateCheck -->
    </test> <!-- DateCheck -->
    <test name="Loan" duration-ms="19" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestLoan">
        <test-method status="PASS" signature="testComputeLoan()[pri:0, instance:TestLoan@10ad8659]" name="testComputeLoan" duration-ms="13" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testComputeLoan -->
      </class> <!-- TestLoan -->
    </test> <!-- Loan -->
    <test name="WindChill" duration-ms="3" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestWindChill">
        <test-method status="PASS" signature="testComputeWindChill()[pri:0, instance:TestWindChill@44d3db51]" name="testComputeWindChill" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testComputeWindChill -->
        <test-method status="PASS" signature="testInvalidTemperature()[pri:0, instance:TestWindChill@44d3db51]" name="testInvalidTemperature" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid input for formula.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid input for formula.
	at WindChill.computeWindChill(WindChill.java:58)
	at TestWindChill.testInvalidTemperature(TestWindChill.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidTemperature -->
        <test-method status="PASS" signature="testInvalidWindSpeed()[pri:0, instance:TestWindChill@44d3db51]" name="testInvalidWindSpeed" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid input for formula.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid input for formula.
	at WindChill.computeWindChill(WindChill.java:58)
	at TestWindChill.testInvalidWindSpeed(TestWindChill.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidWindSpeed -->
      </class> <!-- TestWindChill -->
    </test> <!-- WindChill -->
    <test name="PolarCoordinates" duration-ms="27" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestPolarCoordinates">
        <test-method status="PASS" signature="testPolarCoordinates()[pri:0, instance:TestPolarCoordinates@6a5f6303]" name="testPolarCoordinates" duration-ms="1" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolarCoordinates -->
      </class> <!-- TestPolarCoordinates -->
    </test> <!-- PolarCoordinates -->
    <test name="Ordered" duration-ms="17" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestOrdered">
        <test-method status="PASS" signature="testAreOrdered()[pri:0, instance:TestOrdered@979dce4]" name="testAreOrdered" duration-ms="1" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAreOrdered -->
      </class> <!-- TestOrdered -->
    </test> <!-- Ordered -->
    <test name="DayOfWeek" duration-ms="7" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestDayOfWeek">
        <test-method status="PASS" signature="testDayOfWeek()[pri:0, instance:TestDayOfWeek@403ef810]" name="testDayOfWeek" duration-ms="2" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDayOfWeek -->
        <test-method status="PASS" signature="testInvalidDay()[pri:0, instance:TestDayOfWeek@403ef810]" name="testInvalidDay" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid input.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid input.
	at DayOfWeek.dayOfWeek(DayOfWeek.java:78)
	at TestDayOfWeek.testInvalidDay(TestDayOfWeek.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidDay -->
        <test-method status="PASS" signature="testInvalidMonth()[pri:0, instance:TestDayOfWeek@403ef810]" name="testInvalidMonth" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid input.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid input.
	at DayOfWeek.dayOfWeek(DayOfWeek.java:78)
	at TestDayOfWeek.testInvalidMonth(TestDayOfWeek.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidMonth -->
        <test-method status="PASS" signature="testInvalidYear()[pri:0, instance:TestDayOfWeek@403ef810]" name="testInvalidYear" duration-ms="0" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid input.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid input.
	at DayOfWeek.dayOfWeek(DayOfWeek.java:78)
	at TestDayOfWeek.testInvalidYear(TestDayOfWeek.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1203)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1128)
	at org.testng.TestNG.run(TestNG.java:1036)
	at org.testng.TestNG.privateMain(TestNG.java:1343)
	at org.testng.TestNG.main(TestNG.java:1312)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidYear -->
      </class> <!-- TestDayOfWeek -->
    </test> <!-- DayOfWeek -->
    <test name="UniformRandom" duration-ms="1" started-at="2012-12-01T21:44:25Z" finished-at="2012-12-01T21:44:25Z">
      <class name="TestUniformRandom">
        <test-method status="PASS" signature="testAverage()[pri:0, instance:TestUniformRandom@671ff436]" name="testAverage" duration-ms="1" started-at="2012-12-01T16:44:25Z" finished-at="2012-12-01T16:44:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAverage -->
      </class> <!-- TestUniformRandom -->
    </test> <!-- UniformRandom -->
  </suite> <!-- Chapter 1 Test Suite -->
</testng-results>
